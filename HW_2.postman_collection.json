{
	"info": {
		"_postman_id": "02839ea8-f3cf-481b-b7a6-06d4120e6ce3",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1 get_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2 post_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"console.log(jsonData)",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"let req_name = jsonData.name;",
							"console.log(req_name)",
							"pm.test(\"Item_4 request_name\", function(){",
							"    pm.expect(req_name).to.eql(\"Oleksandr\")",
							"})",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"let req_age = jsonData.age;",
							"console.log(req_age)",
							"pm.test(\"Item_5 request_age\", function(){",
							"    pm.expect(req_age).to.eql('38')",
							"})",
							"// 6.  Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"let req_salary = jsonData.salary;",
							"console.log(req_salary)",
							"pm.test(\"Item_6 request_salary\", function(){",
							"    pm.expect(req_salary).to.eql(2000)",
							"})",
							"// 7. Спарсить request.",
							"let req = request.data;",
							"console.log(req)",
							"",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let resp_name = req.name;  ",
							"console.log(resp_name)",
							"pm.test(\"Item_8 check_name response\", function(){",
							"    pm.expect(resp_name).to.eql(req_name)",
							"})",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let resp_age = req.age;  ",
							"pm.test(\"Item_9 check_age response\", function(){",
							"    pm.expect(resp_age).to.eql(jsonData.age)",
							"})",
							"// // 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let resp_salary = Number (req.salary);  ",
							"pm.test(\"Item_10 check_salary response\", function(){",
							"    pm.expect(resp_salary).to.eql(jsonData.salary)",
							"})",
							"",
							"// 11. Вывести в консоль параметр family из response.",
							"let resp_family = jsonData.family;",
							"console.log(resp_family)",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"let u_salary_1_5_year = jsonData.family.u_salary_1_5_year",
							"pm.test(\"Проверить что u_salary_1_5_year в ответе\", function(){",
							"    pm.expect(u_salary_1_5_year).to.eql(req.salary*4)",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Oleksandr",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3 get",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_1?name=Oleksandr&age=38&weight=70",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "weight",
							"value": "70"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4 get",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name=Oleksandr&age=38&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5 get_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"",
							"console.log(jsonData)",
							"console.log(req)",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"response_name\", function(){",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"})",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"response_age\", function(){",
							"    pm.expect(jsonData.age).to.eql(req.age);",
							"})",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"response_salary\", function(){",
							"    pm.expect(Number (jsonData.salary)).to.eql(Number (req.salary));",
							"})",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"let resp_family = jsonData.family;",
							"console.log(resp_family)",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"dog_name\", function(){",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name');",
							"})",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"dog_age\", function(){",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age');",
							"})",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"console.log(jsonData.family.pets.dog)",
							"pm.test(\"dog_name_Luky\", function(){",
							"    pm.expect(jsonData.family.pets.dog.name).to.deep.include(\"Luky\");",
							"})",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"dog_age_4\", function(){",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Oleksandr&age=38&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6 get_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"",
							"console.log(jsonData)",
							"console.log(req)",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"response_name\", function(){",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"})",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"response_age\", function(){",
							"    pm.expect(Number (jsonData.age)).to.eql(Number (req.age));",
							"})",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"let resp_salary_req = req.salary;",
							"console.log(resp_salary_req)",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"let resp_salary_resp = jsonData.salary;",
							"console.log(resp_salary_resp)",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"console.log(jsonData.salary[0])",
							"pm.test(\"salary_0_check\", function(){",
							"    pm.expect(Number (jsonData.salary[0])).to.eql(+req.salary);",
							"})",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"console.log(jsonData.salary[1])",
							"pm.test(\"salary_1_check\", function(){",
							"    pm.expect(Number (jsonData.salary[1])).to.eql(req.salary*2);",
							"})",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.",
							"console.log(jsonData.salary[2])",
							"pm.test(\"salary_2_check\", function(){",
							"    pm.expect(Number (jsonData.salary[2])).to.eql(req.salary*3);",
							"})",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"let obj = jsonData.salary;",
							"for (var prop in obj) {",
							"  console.log(\"obj.\" + prop + \" = \" + obj[prop]);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Oleksandr&age=38&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleksandr"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7 post_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 6. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"console.log(jsonData)",
							"// 7. Спарсить request.",
							"let req = request.data;",
							"console.log(req)",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Have start_qa_salary\", function(){",
							"    pm.expect(jsonData).to.have.property('start_qa_salary')",
							"})",
							"",
							"pm.test(\"Have qa_salary_after_6_months\", function(){",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months')",
							"})",
							"pm.test(\"Have qa_salary_after_12_months\", function(){",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months')",
							"})",
							"",
							"console.log(jsonData['qa_salary_after_1.5_year'])",
							"",
							"pm.test(\"Have qa_salary_after_1.5_year\", function(){",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year')",
							"})",
							"pm.test(\"Have qa_salary_after_3.5_years\", function(){",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years')",
							"})",
							"pm.test(\"Have person\", function(){",
							"    pm.expect(jsonData).to.have.property('person')",
							"})",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"check start_qa_salary \", function(){",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);",
							"})",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"check qa_salary_after_6_months \", function(){",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary*2);",
							"})",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"check qa_salary_after_12_months \", function(){",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary*2.7);",
							"})",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"check qa_salary_after_1.5_year\", function(){",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(+req.salary*3.3);",
							"})",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"check qa_salary_after_3.5_years\", function(){",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(+req.salary*3.8);",
							"})",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"console.log(jsonData.person.u_name[1]);",
							"pm.test(\"check person.u_name[1]\", function(){",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);",
							"})",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"check person.u_age\", function(){",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);",
							"})",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"check u_salary_5_years \", function(){",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary*4.2);",
							"})",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"let obj = jsonData.person;",
							"for (var prop in obj) {",
							"  console.log(\"obj.\" + prop + \" = \" + obj[prop]);",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Oleksandr",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}